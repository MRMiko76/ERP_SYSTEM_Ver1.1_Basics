// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  password  String?
  phone     String?
  avatar    String?
  bio       String?
  role      UserRole @default(USER)
  active    Boolean  @default(true)
  lastLogin DateTime?
  permissionsVersion Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts     Post[]
  userRoles UserRoleAssignment[]
  createdRoles Role[] @relation("CreatedRoles")
  
  // Indexes for performance optimization
  @@index([active])
  @@index([role])
  @@index([createdAt])
  @@index([lastLogin])
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  
  // Relations
  createdBy   User     @relation("CreatedRoles", fields: [createdById], references: [id])
  permissions RolePermission[]
  userRoles   UserRoleAssignment[]
  
  // Indexes for performance optimization
  @@index([active])
  @@index([createdAt])
  @@index([createdById])
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  module      String   // e.g., "users", "products", "orders"
  action      String   // e.g., "create", "read", "update", "delete", "export", "print"
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  
  // Indexes for performance optimization
  @@index([module])
  @@index([action])
  @@index([active])
  @@unique([module, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  // Indexes for performance optimization
  @@index([userId])
  @@index([roleId])
  @@index([active])
  @@index([userId, active])
  @@index([roleId, active])
  @@unique([userId, roleId])
  @@map("user_role_assignments")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Indexes for performance optimization
  @@index([authorId])
  @@index([published])
  @@index([createdAt])
   @@map("posts")
}

model PermissionsVersion {
  version   Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("permissions_versions")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}